
COMPILER Java


	String curMethod = "";
	boolean isVoidMethode = false;
    Locator loc;

	int pos(int i) {
		if (i >= 0) return i; else return i + SIZE;
	}

	boolean isMethodBlock() {
		if ((la.kind == _lbrace && buf[pos(top-2)].kind == _rpar) || la.kind == _throws_) {
			int level = 1;
			int i = pos(top-3);
			while (i != top &&  i <= bufLen ) {
				if (buf[i].kind == _rpar) level++;
				else if (buf[i].kind == _lpar) {
					level--;
					if (level == 0) {
						if (buf[pos(i-1)].kind == _ident) {
							curMethod = buf[pos(i-1)].val;
                            isVoidMethode = buf[pos(i-2)].kind == _void_ || loc.getCurrClassName().equals(curMethod);
							return true;
						} else return false;
					}
				}
				i = pos(i-1);
			}
		}
		return false;
	}

    Token findMethodBegin() {
        if(la.kind == _ident && ("super".equals(la.val) || "this".equals(la.val) )){
			Token peekToken = scanner.Peek();
            if(peekToken.kind == _lpar){
                for (;;){
                    if (";".equals(peekToken.val)){
                        return peekToken;
                    }
                    peekToken = scanner.Peek();
                }
            }
        }
        return t;
    }

	boolean isReturnInBlock(){
		if (buf[pos(top-3)].kind == _rpar 
			|| buf[pos(top-3)].kind == _else_) {
			return false;
		}
		return true;
	}
	

/*-------------------------------------------------------------------------*/

CHARACTERS
  letter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_".
  digit     = "0123456789".
  noquote   = ANY - '"'.
  noapo     = ANY - '\''.

TOKENS
  ident     = letter {letter | digit}.
  number    = digit {digit}.
  string    = '"' {noquote | '\\' ['"']} '"'.
  charCon   = '\'' {noapo | '\\' ['\'']} '\''.
  void_      = "void".
  if_       = "if".
  while_    = "while".
  switch_   = "switch".
  else_     = "else".
  throws_   = "throws".
  lpar      = '('.
  rpar      = ')'.
  lbrace    = '{'.
  rbrace    = '}'.

COMMENTS FROM "/*" TO "*/"
COMMENTS FROM "//" TO "\r\n"

IGNORE '\r' + '\n' + '\t'

/*-------------------------------------------------------------------------*/

PRODUCTIONS

Java
= { ClassDeclaration<false>
    {ANY} "{"
    ClassBody<false>
  | ANY
  }.

ClassDeclaration<boolean innerClass>
= "class" ident                                    (.  if(innerClass){
                                                         loc.registerInnerClass(t);
                                                       } else {
                           							     loc.registerClass(t);
                           							   }
                           							.)

.

ClassBody<boolean innerClass>
= { IF(isMethodBlock())
	[ "throws" ident {"," ident} ] "{"
		                                      (.
                                                 Token bTok = findMethodBegin();
								                 loc.registerMethod(bTok, curMethod);
						                      .)
		Block<false, true>
	| "{" Block<false, false>  // non-method block
    | ClassDeclaration<true> {ANY} "{"
        ClassBody<true>
	|   ANY
	}
	"}"
	                                           (.if(innerClass){
                                                   loc.leaveInnerClass(t);
                                                 }
                                               .)
	.

Block< boolean unroll, boolean method>
=
                                              (.  if(unroll){
                                                    loc.registerUnroll(t);
                                                  }
                                              .)
{  "{"
      Block<false, false>
	| "return"
	                                         (.
							                   loc.registerReturn(t, isReturnInBlock());
						                     .)
	   {ANY} ";"
	|  (("catch" "("  QualIdent { "|" QualIdent } ident ")" )
       | ("finally" )
       )"{"
       Block<true, false>
	| ANY
	}
	"}"
	                                         (.
								               if( method && isVoidMethode){
		    					                loc.leaveVoidMethod(t);
		                                       }
						                     .)
	.

QualIdent =
    ident { "." ident}.

END Java.
