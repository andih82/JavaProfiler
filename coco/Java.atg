
COMPILER Java


	String curMethod = "";
	String packageString = "";
	boolean isVoidMethode = false;
    Locator loc;

	int pos(int i) {
		if (i >= 0) return i; else return i + SIZE;
	}

	boolean isMethodBlock() {
		if ((la.kind == _lbrace && buf[pos(top-2)].kind == _rpar) || la.kind == _throws_) {
			int level = 1;
			int i = pos(top-3);
			while (i != top &&  i <= bufLen ) {
				if (buf[i].kind == _rpar) level++;
				else if (buf[i].kind == _lpar) {
					level--;
					if (level == 0) {
						if (buf[pos(i-1)].kind == _ident) {
							curMethod = buf[pos(i-1)].val;
                            isVoidMethode = buf[pos(i-2)].kind == _void_ || loc.getCurrClassName().equals(curMethod);
							return true;
						} else return false;
					}
				}
				i = pos(i-1);
			}
		}
		return false;
	}

	boolean isLambdaBlock() {
        if ((la.kind == _lbrace && buf[pos(top-2)].kind == _arrow)) {
            return true;
        }
        return false;
    }

	boolean isAnonymClassDeclariation() {
        if ((la.kind == _lbrace && buf[pos(top-2)].kind == _rpar)) {
            int level = 1;
    	    int i = pos(top-3);
    	    while (i != top &&  i <= bufLen ) {
            	if (buf[i].kind == _rpar) level++;
            	else if (buf[i].kind == _lpar) {
            		level--;
            		if (level == 0) {
            		   i = pos(i-1);
                       while (i != top &&  i <= bufLen ) {
                          if(buf[i].kind == _new_) {
                             return true;
                          } else if ( !(buf[i].kind == _ident || buf[i].kind == _ldiamond ||
                                        buf[i].kind == _rdiamond || buf[i].kind == _comma ||
                                        buf[i].kind == _rbracket || buf[i].kind == _lbracket) ) {
        	                 return false;
        	              }
                          i = pos(i-1);
                      }
                    }
                }
                i = pos(i-1);
            }
        }
        return false;
    }

    Token findMethodBegin() {
        scanner.ResetPeek();
        if(la.kind == _ident && ("super".equals(la.val) || "this".equals(la.val) )){
			Token peekToken = scanner.Peek();
            if(peekToken.kind == _lpar){
                for (;;){
                    if (";".equals(peekToken.val)){
                        return peekToken;
                    }
                    peekToken = scanner.Peek();
                }
            }
        }
        return t;
    }

	boolean isReturnInBlock(){
		if (buf[pos(top-3)].kind == _rpar 
			|| buf[pos(top-3)].kind == _else_) {
			return false;
		}
		return true;
	}

	boolean isDirectAfterThorw(){
        if (";".equals(buf[pos(top-3)].val)) {
        			int level = 0;
        			int i = pos(top-4);
        			while (i != top &&  i <= bufLen ) {
        				if (buf[i].kind == _rpar) level++;
        				else if (buf[i].kind == _lpar) {
        					level--;
        					if (level == 0) {
        						if (buf[pos(i-2)].kind == _new_ && buf[pos(i-3)].kind == _ident && "throw".equals(buf[pos(i-3)].val))  {
        						   if (buf[pos(i-4)].kind == _rpar || buf[pos(i-4)].kind == _else_) {
                                       return false;
                                   }
                                   return true;
        						} else return false;
        					}
        				}
        				i = pos(i-1);
        			}
        		}
        		return false;
    }
	

/*-------------------------------------------------------------------------*/

CHARACTERS
  letter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_".
  digit     = "0123456789".
  cr = '\r'.
  lf = '\n'.
  tab = '\t'.
  bslash = '\\'.
  quote = '"'.
  apostrophe = '\''.
  noApostrophe = ANY - apostrophe - bslash - cr - lf.
  noQuote = ANY - quote.
  noQuoteNoBSlash = ANY - quote - bslash.
  escapableChar = 'b'+ 's' + 't' + 'n' + 'f' + 'r' + quote + apostrophe + bslash.
  hexDigit = digit + 'a'..'f' + 'A'..'F'.
  zeroToThree = "0123".
  octalDigit = "01234567".
  TOKENS
  ident = letter {letter | digit}.
  // char & string from https://github.com/matwoess/java-profiler/blob/main/profiler-tool/src/main/java/tool/instrument/JavaFile.atg
  char =
      apostrophe (
          noApostrophe
          | bslash (
              escapableChar
              | 'u' {'u'} hexDigit hexDigit hexDigit hexDigit
              | (octalDigit [octalDigit] | zeroToThree octalDigit octalDigit)
          )
      ) apostrophe.
  string =
      quote (
          quote quote lf  // multi-line "text block" string
              {   noQuote
                  | quote noQuote
                  | quote quote noQuote
                  | [quote] [quote] bslash quote
              }
              quote quote quote
          | {             // common string literal
              (   noQuoteNoBSlash
                  | bslash (
                      escapableChar
                      | 'u' {'u'} hexDigit hexDigit hexDigit hexDigit
                      | (octalDigit [octalDigit] | zeroToThree octalDigit octalDigit)
                  )
              )
          }
          quote
      ).
  void_      = "void".
  if_       = "if".
  for_      = "for".
  while_    = "while".
  switch_   = "switch".
  else_     = "else".
  throws_   = "throws".
  lpar      = '('.
  rpar      = ')'.
  lbrace    = '{'.
  rbrace    = '}'.
  ldiamond  = '<'.
  rdiamond  = '>'.
  lbracket  = '['.
  rbracket  = ']'.
  comma     = ','.
  arrow     = "->".
  new_      = "new".


COMMENTS FROM "/*" TO "*/"
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab
/*-------------------------------------------------------------------------*/

PRODUCTIONS

Java
= [PackageDeclaration]                         (. loc.registerPackage(t, packageString); .)
  { ClassDeclaration<false>
    | ANY
  }.

ClassDeclaration<boolean innerClass>
=
       ("class"  | "enum" | "interface" | "record")
       ( (";"| "," | ")")                           // skip Classname.class calls
         | (ident                                   (. if(innerClass) loc.registerInnerClass(t, false); .)
                                                    (. else loc.registerClass(t); .)
           {ANY} "{"
           ClassBody<innerClass>)
       )

.

ClassBody<boolean innerClass>
= { IF(isMethodBlock())	[ "throws" ident {"," ident} ]
       (";" |                                    //skip abstract method declaration
           ( "{"                               (. loc.registerMethod(findMethodBegin(), curMethod); .)
	       Block<false, isVoidMethode, false>
	   ))
	| IF(isAnonymClassDeclariation()) "{"      (. loc.registerInnerClass(t, true); .)
      ClassBody<true>
    | IF(isLambdaBlock()) "{"
      Block<false, false, true>
	| ClassDeclaration<true>
	| "{" Block<false, false, false>  // non-method block
	| ANY
}
"}"                                            (. if(innerClass) loc.leaveInnerClass(t); .)
.

Block< boolean unroll, boolean methodEnd, boolean ignoreReturn>
=                                              (. if(unroll) loc.registerUnroll(t); .)
{   IF(isAnonymClassDeclariation()) "{"        (. loc.registerInnerClass(t, true); .)
      ClassBody<true>
    | IF(isLambdaBlock()) "{"
       Block<false, false, true>
    | "{" Block<false, false, false>
	| ReturnStatement<ignoreReturn>
	| ExitStatement
	| UnrollBlock
	| ANY
}
"}"                                            (. if(methodEnd && !isDirectAfterThorw()) loc.leaveVoidMethod(t); .)
.

ReturnStatement<boolean ignore>
=  "return"                                    (. if(!ignore) loc.registerReturn(t, isReturnInBlock());.)
   {ANY} ";"
.

ExitStatement
=  "System"                                    (. Token temp = t; boolean isBlock = isReturnInBlock(); .)
   "." ident                                   (. if(t.val.equals("exit")) loc.registerReturn(temp, isBlock); .)
.

UnrollBlock =
   (("catch" "("  QualIdent { "|" QualIdent } ident ")" )
     | "finally"
   ) "{"
   Block<true, false, false>
.

PackageDeclaration =
    "package" ident                            (. packageString = t.val; .)
     { "." ident                               (. packageString += "." + t.val; .)
     }
     ";"
.

QualIdent =
    ident { "." ident}
.

END Java.
